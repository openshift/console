import { Given, When, Then } from 'cypress-cucumber-preprocessor/steps';
import { detailsPage } from '@console/cypress-integration-tests/views/details-page';
import { devNavigationMenu } from '../../constants';
import { pagePO, vulnerabilityPO } from '../../pageObjects';
import { navigateTo } from '../../pages';
import { importYaml } from '../../pages/importYaml';

Given('user created deployment resource using YAML editor from {string}', (yamlFile: string) => {
  importYaml.setYAMLEditorContent(yamlFile);
  cy.get(pagePO.breadcrumb).should('be.visible');
  detailsPage.titleShouldContain('test-vulnerability');
});

Given('user is at project tab', () => {
  navigateTo(devNavigationMenu.Project);
});

When('user clicks on the vulnerability tab', () => {
  cy.get(vulnerabilityPO.vulnerabilityTab)
    .should('be.visible')
    .click();
});

Given('user can see Image Manifest vulnerabilities', () => {
  cy.byDataID('0-0').should('be.visible');
});

Then('user can see filter with {string} option selected', (filterName: string) => {
  cy.get(vulnerabilityPO.dropdowButton).should('have.text', filterName);
});

When(
  'user can see {string}, {string}, {string}, {string}, {string}, and {string}',
  (el1, el2, el3, el4, el5, el6: string) => {
    cy.get(vulnerabilityPO.vulnerabilityTable)
      .should('contain', el1)
      .and('contain', el2)
      .and('contain', el3)
      .and('contain', el4)
      .and('contain', el5)
      .and('contain', el6);
  },
);

When('user clicks on the Image Vulnerabilities in Status section', () => {
  cy.get(vulnerabilityPO.imageVulnerabilityAlert)
    .should('be.visible')
    .click();
  cy.get(vulnerabilityPO.imageVulnerabilityPopup).should('be.visible');
});

Then('user clicks on the View all link on Image Vulnerability breakdown pop overview', () => {
  cy.get(vulnerabilityPO.viewAllLink)
    .should('be.visible')
    .click({ force: true });
});

Then('user clicks on dropdown associated with filter', () => {
  cy.get(vulnerabilityPO.dropdowButton)
    .should('be.visible')
    .click();
});

When('user clicks on label option', () => {
  cy.byTestDropDownMenu('LABEL')
    .should('be.visible')
    .click();
});

When('user clicks on the image name in Image Vulnerability breakdown pop over', () => {
  cy.get(vulnerabilityPO.firstVulnerabilityLink)
    .should('be.visible')
    .click({ force: true });
});

When('user clicks on {string} type of vulnerability', (tabName) => {
  cy.log(`[id="${tabName}"]`);
  cy.get(vulnerabilityPO.vulnerabilityType).should('be.visible');
  cy.get(`[id="${tabName}"]`)
    .should('be.visible')
    .click({ force: true });
});

Then(
  'user can see image manifest vulnerability Details, YAML and Affected Pods tabs on ImageManifestsVuln Details page',
  () => {
    cy.get(vulnerabilityPO.detailsTab).should('be.visible');
    cy.get(vulnerabilityPO.yamlTab).should('be.visible');
    cy.get(vulnerabilityPO.affectedPodsTab).should('be.visible');
  },
);

Then('user can see {string} vulnerabilities tab selected', (tab: string) => {
  cy.get(`[id="${tab}"]`).then(($el) => {
    expect($el.prop('ariaPressed')).toEqual(`true`);
  });
});

Given('user is at Image manifests vulnerability details page of {string}', (vul: string) => {
  navigateTo(devNavigationMenu.Project);
  cy.get(vulnerabilityPO.vulnerabilityTab)
    .should('be.visible')
    .click();
  cy.byLegacyTestID(vul)
    .should('be.visible')
    .click();
  cy.byTestSectionHeading('Image Manifest Vulnerabilities details').should('be.visible');
});

When('user clicks on Filter dropdown menu in vulnerabilities section', () => {
  cy.get(vulnerabilityPO.filterDropdownToggle)
    .scrollIntoView()
    .should('be.visible')
    .click();
});

When('user clicks on {string} Type filter', (filter: string) => {
  cy.get(`[data-test-row-filter="${filter}"] input[id="${filter}"]`)
    .should('be.visible')
    .click();
});

Then('user can see {string} filter selected', (filter: string) => {
  cy.get(`[data-test-row-filter="${filter}"] input[id="${filter}"]`).should('be.checked');
});

Then(
  'user can see {string}, {string}, {string}, {string}, {string}, {string} and {string} in Severity filter',
  (op1, op2, op3, op4, op5, op6, op7: string) => {
    cy.get(vulnerabilityPO.severity)
      .should('contain', op1)
      .and('contain', op2)
      .and('contain', op3)
      .and('contain', op4)
      .and('contain', op5)
      .and('contain', op6)
      .and('contain', op7);
  },
);
