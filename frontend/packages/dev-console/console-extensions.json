[
  {
    "type": "console.perspective",
    "properties": {
      "id": "dev",
      "name": "%devconsole~Developer%",
      "icon": { "$codeRef": "perspective.icon" },
      "defaultPins": [
        {
          "group": "",
          "version": "v1",
          "kind": "ConfigMap"
        },
        {
          "group": "",
          "version": "v1",
          "kind": "Secret"
        }
      ],
      "landingPageURL": { "$codeRef": "perspective.getLandingPageURL" },
      "importRedirectURL": { "$codeRef": "perspective.getImportRedirectURL" },
      "usePerspectiveDetection": { "$codeRef": "perspective.usePerspectiveDetection" }
    }
  },

  {
    "type": "console.cluster-configuration/item",
    "properties": {
      "id": "dev-console.project-access.ProjectAccessRolesConfiguration",
      "groupId": "projects",
      "label": "%devconsole~Project access Cluster Roles%",
      "description": "%devconsole~Define a list of ClusterRole names that are assignable to users on the project access page.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "projectAccess.ProjectAccessRolesConfiguration" }
      },
      "readAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "get",
          "name": "cluster"
        },
        {
          "resource": "clusterroles",
          "verb": "list"
        }
      ],
      "writeAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "patch",
          "name": "cluster"
        }
      ]
    }
  },
  {
    "type": "console.cluster-configuration/item",
    "properties": {
      "id": "dev-console.PinnedResourcesConfiguration",
      "groupId": "developer",
      "label": "%devconsole~Pre-pinned navigation items%",
      "description": "%devconsole~Resource links that are shown below the standard navigation items. These pinned resources can still be changed by the user.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "catalog.PinnedResourcesConfiguration" }
      },
      "readAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "get",
          "name": "cluster"
        }
      ],
      "writeAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "patch",
          "name": "cluster"
        }
      ]
    }
  },
  {
    "type": "console.cluster-configuration/item",
    "properties": {
      "id": "dev-console.AddPageConfiguration",
      "groupId": "developer",
      "label": "%devconsole~Add page actions%",
      "description": "%devconsole~A list of actions that are not shown to users on the add page.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "add.AddPageConfiguration" }
      },
      "readAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "get",
          "name": "cluster"
        }
      ],
      "writeAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "patch",
          "name": "cluster"
        }
      ]
    }
  },
  /*
  {
    "type": "console.cluster-configuration/item",
    "properties": {
      "id": "dev-console.CatalogCategoriesConfiguration",
      "groupId": "developer",
      "label": "%devconsole~Developer Catalog Types%",
      "description": "%devconsole~Categories which are shown in the developer catalog.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "catalog.CatalogCategoriesConfiguration" }
      },
      "readAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "get",
          "name": "cluster"
        }
      ],
      "writeAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "patch",
          "name": "cluster"
        }
      ]
    }
  },
  */
  {
    "type": "console.cluster-configuration/item",
    "properties": {
      "id": "dev-console.CatalogTypesConfiguration",
      "groupId": "developer",
      "label": "%devconsole~Developer Catalog Types%",
      "description": "%devconsole~A list of developer catalog types that are not shown to users.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "catalog.CatalogTypesConfiguration" }
      },
      "readAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "get",
          "name": "cluster"
        }
      ],
      "writeAccessReview": [
        {
          "group": "operator.openshift.io/v1",
          "resource": "consoles",
          "verb": "patch",
          "name": "cluster"
        }
      ]
    }
  },
  {
    "type": "console.flag/hookProvider",
    "properties": {
      "handler": { "$codeRef": "actions.useDeveloperCatalogProvider" }
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "developer-catalog",
      "name": "%devconsole~Developer Catalog%",
      "insertBefore": "git-repository"
    },
    "flags": {
      "required": ["DEVELOPER_CATALOG"]
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "git-repository",
      "name": "%devconsole~Git Repository%",
      "insertBefore": "container-images",
      "insertAfter": "developer-catalog"
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "container-images",
      "name": "%devconsole~Container images%",
      "insertBefore": "eventing",
      "insertAfter": "git-repository"
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "local-machine",
      "name": "%devconsole~From Local Machine%",
      "insertBefore": "pipelines",
      "insertAfter": "eventing"
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "samples",
      "name": "%devconsole~Samples%",
      "insertAfter": "pipelines"
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "application-portability",
      "name": "%devconsole~Application portability%",
      "insertBefore": "local-machine"
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "import-from-samples",
      "groupId": "samples",
      "href": "/samples/ns/:namespace",
      "label": "%devconsole~Samples%",
      "description": "%devconsole~Create an application from a code sample%",
      "icon": { "$codeRef": "icons.samplesIconElement" },
      "accessReview": [
        { "group": "build.openshift.io", "resource": "buildconfigs", "verb": "create" },
        { "group": "image.openshift.io", "resource": "imagestreams", "verb": "create" },
        { "group": "apps.openshift.io", "resource": "deploymentconfigs", "verb": "create" },
        { "group": "", "resource": "secrets", "verb": "create" },
        { "group": "route.openshift.io", "resource": "routes", "verb": "create" },
        { "group": "", "resource": "services", "verb": "create" }
      ]
    },
    "flags": {
      "required": ["DEVELOPER_CATALOG", "SAMPLE_CATALOG_TYPE"]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "import-from-git",
      "groupId": "git-repository",
      "href": "/import/ns/:namespace",
      "label": "%devconsole~Import from Git%",
      "description": "%devconsole~Import code from your Git repository to be built and deployed%",
      "icon": { "$codeRef": "icons.gitIconElement" },
      "accessReview": [
        { "group": "build.openshift.io", "resource": "buildconfigs", "verb": "create" },
        { "group": "image.openshift.io", "resource": "imagestreams", "verb": "create" },
        { "group": "apps.openshift.io", "resource": "deploymentconfigs", "verb": "create" },
        { "group": "", "resource": "secrets", "verb": "create" },
        { "group": "route.openshift.io", "resource": "routes", "verb": "create" },
        { "group": "", "resource": "services", "verb": "create" }
      ]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "deploy-image",
      "groupId": "container-images",
      "href": "/deploy-image/ns/:namespace",
      "label": "%devconsole~Container images%",
      "description": "%devconsole~Deploy an existing Image from an Image registry or Image stream tag%",
      "icon": { "$codeRef": "icons.deployIconElement" },
      "accessReview": [
        { "group": "build.openshift.io", "resource": "buildconfigs", "verb": "create" },
        { "group": "image.openshift.io", "resource": "imagestreams", "verb": "create" },
        { "group": "apps.openshift.io", "resource": "deploymentconfigs", "verb": "create" },
        { "group": "image.openshift.io", "resource": "imagestreamimports", "verb": "create" },
        { "group": "", "resource": "secrets", "verb": "create" },
        { "group": "route.openshift.io", "resource": "routes", "verb": "create" },
        { "group": "", "resource": "services", "verb": "create" }
      ]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "import-yaml",
      "groupId": "local-machine",
      "href": "/k8s/ns/:namespace/import",
      "label": "%devconsole~Import YAML%",
      "description": "%devconsole~Create resources from their YAML or JSON definitions%",
      "icon": { "$codeRef": "icons.yamlIconElement" }
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "dev-catalog",
      "groupId": "developer-catalog",
      "href": "/catalog/ns/:namespace",
      "label": "%devconsole~All services%",
      "description": "%devconsole~Browse the catalog to discover, deploy and connect to services%",
      "icon": { "$codeRef": "icons.devCatalogIconElement" }
    },
    "flags": {
      "required": ["DEVELOPER_CATALOG"]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "dev-catalog-databases",
      "groupId": "developer-catalog",
      "href": "/catalog/ns/:namespace?category=databases",
      "label": "%devconsole~Database%",
      "description": "%devconsole~Browse the catalog to discover database services to add to your application%",
      "icon": { "$codeRef": "icons.databaseCatalogIconElement" }
    },
    "flags": {
      "required": ["DEVELOPER_CATALOG"]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "operator-backed",
      "groupId": "developer-catalog",
      "href": "/catalog/ns/:namespace?catalogType=OperatorBackedService",
      "label": "%devconsole~Operator Backed%",
      "description": "%devconsole~Browse the catalog to discover and deploy operator managed services%",
      "icon": { "$codeRef": "icons.operatorCatalogIconElement" }
    },
    "flags": {
      "required": ["DEVELOPER_CATALOG", "OPERATOR_BACKED_SERVICE_CATALOG_TYPE"]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "upload-jar",
      "groupId": "local-machine",
      "href": "/upload-jar/ns/:namespace",
      "label": "%devconsole~Upload JAR file%",
      "description": "%devconsole~Upload a JAR file from your local desktop to OpenShift%",
      "icon": { "$codeRef": "icons.uploadJarIconElement" },
      "accessReview": [
        { "group": "build.openshift.io", "resource": "buildconfigs", "verb": "create" },
        { "group": "image.openshift.io", "resource": "imagestreams", "verb": "create" },
        { "group": "apps.openshift.io", "resource": "deploymentconfigs", "verb": "create" },
        { "group": "", "resource": "secrets", "verb": "create" },
        { "group": "route.openshift.io", "resource": "routes", "verb": "create" },
        { "group": "", "resource": "services", "verb": "create" }
      ]
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "export-application",
      "groupId": "application-portability",
      "callback": { "$codeRef": "actions.exportApplicationAction" },
      "label": "%devconsole~Export application%",
      "description": "%devconsole~Replicate your application by exporting a zip file, which can be imported to another project or another cluster%",
      "icon": { "$codeRef": "icons.exportApplicationIconElement" },
      "accessReview": [{ "group": "primer.gitops.io", "resource": "exports", "verb": "create" }]
    },
    "flags": {
      "required": ["ALLOW_EXPORT_APP"]
    }
  },
  {
    "type": "dev-console.add/action-group",
    "properties": {
      "id": "sharing",
      "name": "%devconsole~Sharing%",
      "insertAfter": "helm-chart-repositories",
      "insertBefore": "local-machine"
    }
  },
  {
    "type": "dev-console.add/action",
    "properties": {
      "id": "project-access",
      "groupId": "sharing",
      "href": "/project-access/ns/:namespace",
      "label": "%devconsole~Sharing%",
      "description": "%devconsole~Project access allows you to add or remove a user's access to the project%",
      "icon": { "$codeRef": "icons.shareProjectIconElement" },
      "accessReview": [
        { "group": "rbac.authorization.k8s.io", "resource": "rolebindings", "verb": "create" },
        { "group": "rbac.authorization.k8s.io", "resource": "rolebindings", "verb": "list" }
      ]
    }
  },
  {
    "type": "dev-console.import/environment",
    "properties": {
      "imageStreamName": "nodejs",
      "imageStreamTags": ["16-ubi8", "14-ubi8", "14-ubi8-minimal", "12-ubi8", "latest"],
      "environments": [
        {
          "key": "NPM_RUN",
          "label": "%devconsole~Run command%",
          "description": "%devconsole~Optional arguments for npm run.%",
          "defaultValue": "start"
        }
      ]
    }
  },
  {
    "type": "console.catalog/item-type",
    "properties": {
      "type": "BuilderImage",
      "title": "%devconsole~Builder Images%",
      "catalogDescription": "%devconsole~Browse for container images that support a particular language or framework. Cluster administrators can customize the content made available in the catalog.%",
      "typeDescription": "%devconsole~**Builder Images** are container images that build source code for a particular language or framework.%"
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-provider",
    "properties": {
      "catalogId": "dev-catalog",
      "type": "BuilderImage",
      "title": "%devconsole~Builder Images%",
      "provider": { "$codeRef": "catalog.builderImageProvider" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-type",
    "properties": {
      "type": "Template",
      "title": "%devconsole~Templates%",
      "catalogDescription": "%devconsole~Browse for templates that can deploy services, create builds, or create any resources the template enables. Cluster administrators can customize the content made available in the catalog.%",
      "typeDescription": "%devconsole~**Templates** are sets of objects for creating services, build configurations, and anything you have permission to create within a Project.%"
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-provider",
    "properties": {
      "catalogId": "dev-catalog",
      "type": "Template",
      "title": "%devconsole~Templates%",
      "provider": { "$codeRef": "catalog.templateProvider" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-type",
    "properties": {
      "type": "Devfile",
      "title": "%devconsole~Devfiles%",
      "catalogDescription": "%devconsole~Browse for devfiles that support a particular language or framework. Cluster administrators can customize the content made available in the catalog.%",
      "typeDescription": "%devconsole~**Devfiles** are sets of objects for creating services, build configurations, and anything you have permission to create within a Project.%"
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-provider",
    "properties": {
      "catalogId": "dev-catalog",
      "type": "Devfile",
      "title": "%devconsole~Devfiles%",
      "provider": { "$codeRef": "catalog.devfileProvider" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-type-metadata",
    "properties": {
      "type": "OperatorBackedService",
      "filters": [
        {
          "label": "%devconsole~Service binding%",
          "attribute": "bindable",
          "description": "%devconsole~Bindable services can be easily consumed by applications because they expose their binding data (credentials, connection details, volume mounts, secrets, etc.) in a standard way.%"
        }
      ]
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.catalog/item-metadata",
    "properties": {
      "catalogId": "dev-catalog",
      "type": "OperatorBackedService",
      "provider": { "$codeRef": "catalog.bindableItemMetadataProvider" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.catalog/item-type",
    "properties": {
      "type": "Sample",
      "title": "%devconsole~Samples%"
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-provider",
    "properties": {
      "catalogId": "samples-catalog",
      "type": "BuilderImage",
      "title": "%devconsole~Builder Images%",
      "provider": { "$codeRef": "catalog.builderImageSamplesProvider" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.catalog/item-provider",
    "properties": {
      "catalogId": "samples-catalog",
      "type": "Devfile",
      "title": "%devconsole~Devfiles%",
      "provider": { "$codeRef": "catalog.devfileSamplesProvider" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.file-upload",
    "properties": {
      "fileExtensions": ["jar"],
      "handler": { "$codeRef": "fileUpload.jarFileUploadHandler" }
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "add",
      "perspective": "dev",
      "section": "top",
      "name": "%devconsole~+Add%",
      "href": "/add",
      "namespaced": true,
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-add",
        "data-test-id": "+Add-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "topology",
      "perspective": "dev",
      "section": "top",
      "name": "%devconsole~Topology%",
      "href": "/topology",
      "namespaced": true,
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-topology",
        "data-test-id": "topology-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "observe",
      "perspective": "dev",
      "section": "top",
      "name": "%devconsole~Observe%",
      "href": "/dev-monitoring",
      "namespaced": true,
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-monitoring",
        "data-tour-id": "tour-monitoring-nav",
        "data-test-id": "monitoring-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT", "MONITORING"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "search",
      "perspective": "dev",
      "section": "top",
      "name": "%devconsole~Search%",
      "href": "/search-page",
      "namespaced": true,
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-search",
        "data-tour-id": "tour-search-nav",
        "data-test-id": "search-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "project",
      "perspective": "dev",
      "section": "resources",
      "name": "%devconsole~Project%",
      "href": "/project-details",
      "namespaced": true,
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-project",
        "data-test-id": "project-details-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "id": "builds",
      "perspective": "dev",
      "section": "resources",
      "name": "%devconsole~Builds%",
      "href": "/builds",
      "namespaced": true,
      "insertBefore": ["helm", "pipelines"],
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-builds",
        "data-test-id": "build-header"
      }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/builds"],
      "component": { "$codeRef": "common.NamespaceRedirect" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": false,
      "path": ["/builds/all-namespaces", "/builds/ns/:ns"],
      "component": { "$codeRef": "builds.BuildsTabListPage" }
    },
    "flags": {
      "required": ["OPENSHIFT"]
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "id": "top",
      "perspective": "dev"
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "id": "resources",
      "perspective": "dev"
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "Deployment"
      },
      "provider": { "$codeRef": "actions.useEditImportActionProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps.openshift.io",
        "version": "v1",
        "kind": "DeploymentConfig"
      },
      "provider": { "$codeRef": "actions.useEditImportActionProvider" }
    }
  },
  {
    "type": "console.action/provider",
    "properties": {
      "contextId": "topology-context-actions",
      "provider": { "$codeRef": "actions.useTopologyGraphActionProvider" }
    }
  },
  {
    "type": "console.action/provider",
    "properties": {
      "contextId": "topology-context-actions",
      "provider": { "$codeRef": "actions.useTopologyApplicationActionProvider" }
    }
  },
  {
    "type": "console.action/group",
    "properties": {
      "id": "add-to-project",
      "label": "%devconsole~Add to Project%",
      "submenu": true
    }
  },
  {
    "type": "console.topology/component/factory",
    "properties": {
      "getFactory": {
        "$codeRef": "topology.getDevConsoleComponentFactory"
      }
    }
  },
  {
    "type": "console.topology/relationship/provider",
    "properties": {
      "provides": {
        "$codeRef": "topology.providerProvidesServiceBinding"
      },
      "tooltip": "%devconsole~Create Service Binding%",
      "create": {
        "$codeRef": "topology.providerCreateServiceBinding"
      },
      "priority": 100
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.topology/details/tab-section",
    "properties": {
      "id": "topology-tab-section-hpas",
      "tab": "topology-side-bar-tab-resource",
      "provider": {
        "$codeRef": "topology.useHpaTabSectionForTopologySideBar"
      },
      "insertAfter": "topology-tab-section-builds-overview"
    }
  },
  {
    "type": "console.topology/details/tab",
    "properties": {
      "id": "topology-side-bar-tab-observe",
      "label": "%devconsole~Observe%",
      "insertAfter": "topology-side-bar-tab-resource"
    },
    "flags": {
      "required": ["OPENSHIFT", "MONITORING"]
    }
  },
  {
    "type": "console.topology/details/tab-section",
    "properties": {
      "id": "topology-tab-section-observe",
      "tab": "topology-side-bar-tab-observe",
      "provider": {
        "$codeRef": "topology.useObserveSideBarTabSection"
      }
    }
  },
  {
    "type": "console.topology/details/resource-link",
    "properties": {
      "priority": 100,
      "link": { "$codeRef": "topology.getSbrPanelResourceLink" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.topology/details/tab-section",
    "properties": {
      "id": "topology-tab-section-sbr-details",
      "tab": "topology-side-bar-tab-details",
      "provider": {
        "$codeRef": "topology.useSbrPanelDetailsSection"
      }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.topology/details/tab-section",
    "properties": {
      "id": "topology-tab-section-sbr-resource",
      "tab": "topology-side-bar-tab-resource",
      "provider": {
        "$codeRef": "topology.useSbrPanelResourceSection"
      }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "binding.operators.coreos.com",
        "version": "v1alpha1",
        "kind": "ServiceBinding"
      },
      "provider": { "$codeRef": "actions.useServiceBindingActionProvider" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.action/group",
    "properties": {
      "id": "add-to-application",
      "label": "%devconsole~Add to application%",
      "submenu": true,
      "insertAfter": ["delete-application"]
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "devconsole.routingOptions",
      "label": "%devconsole~Security%",
      "groupId": "applications",
      "description": "",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "userPreferences.SecureRouteFields" }
      },
      "insertAfter": "console.preferredCreateEditMethod"
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "devconsole.preferredResource",
      "label": "%devconsole~Resource type%",
      "groupId": "applications",
      "description": "%devconsole~If resource type is not selected, the console default to the latest.%",
      "field": {
        "type": "dropdown",
        "userSettingsKey": "devconsole.preferredResourceType",
        "defaultValue": "kubernetes",
        "description": "%devconsole~The defaults below will only apply to the Import from Git and Deploy Image forms when creating Deployments or Deployment Configs.%",
        "options": [
          {
            "value": "latest",
            "label": "%devconsole~Last used%",
            "description": "%devconsole~The last resource type used when adding a resource.%"
          },
          {
            "value": "kubernetes",
            "label": "%devconsole~Deployment%",
            "description": "%devconsole~A Deployment enables declarative updates for Pods and ReplicaSets.%"
          },
          {
            "value": "openshift",
            "label": "%devconsole~DeploymentConfig%",
            "description": "%devconsole~A DeploymentConfig defines the template for a Pod and manages deploying new Images or configuration changes.%"
          }
        ]
      },
      "insertBefore": "devconsole.routingOptions"
    },
    "flags": {
      "disallowed": ["KNATIVE_SERVING_SERVICE"]
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "devconsole.preferredResource",
      "label": "%devconsole~Resource type%",
      "groupId": "applications",
      "description": "%devconsole~If resource type is not selected, the console default to the last used.%",
      "field": {
        "type": "dropdown",
        "userSettingsKey": "devconsole.preferredResourceType",
        "defaultValue": "knative",
        "description": "%devconsole~The defaults below will only apply to the Import from Git and Deploy Image forms when creating Deployments, Deployment Configs or Serverless Deployment.%",
        "options": [
          {
            "value": "latest",
            "label": "%devconsole~Last used%",
            "description": "%devconsole~The last resource type used when adding a resource.%"
          },
          {
            "value": "kubernetes",
            "label": "%devconsole~Deployment%",
            "description": "%devconsole~A Deployment enables declarative updates for Pods and ReplicaSets.%"
          },
          {
            "value": "openshift",
            "label": "%devconsole~DeploymentConfig%",
            "description": "%devconsole~A DeploymentConfig defines the template for a Pod and manages deploying new Images or configuration changes.%"
          },
          {
            "value": "knative",
            "label": "%devconsole~Serverless Deployment%",
            "description": "%devconsole~A type of deployment that enables Serverless scaling to 0 when idle.%"
          }
        ]
      },
      "insertBefore": "devconsole.routingOptions"
    },
    "flags": {
      "required": ["KNATIVE_SERVING_SERVICE"]
    }
  },
  {
    "type": "console.context-provider",
    "properties": {
      "provider": { "$codeRef": "serviceBindingContext.ServiceBindingContextProvider" },
      "useValueHook": { "$codeRef": "serviceBindingContext.useValuesServiceBindingContext" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/project-access/ns/:ns", "/project-access/all-namespaces"],
      "component": { "$codeRef": "projectAccess.ProjectAccessPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/serverless-function/all-namespaces", "/serverless-function/ns/:ns"],
      "component": {
        "$codeRef": "serverlessFunction.ServerlessFunctionPage"
      }
    },
    "flags": {
      "required": ["KNATIVE_SERVING", "KNATIVE_SERVING_SERVICE"]
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": [
        "/add",
        "/import",
        "/import-sample",
        "/catalog",
        "/samples",
        "/topology",
        "/deploy-image",
        "/project-details",
        "/dev-monitoring",
        "/helm-releases",
        "/upload-jar",
        "/search-page",
        "/builds"
      ],
      "component": { "$codeRef": "common.NamespaceRedirect" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/add/all-namespaces", "/add/ns/:ns"],
      "component": { "$codeRef": "add.AddPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/topology/all-namespaces", "/topology/ns/:name"],
      "component": { "$codeRef": "topology.TopologyPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/catalog/all-namespaces", "/catalog/ns/:ns"],
      "component": { "$codeRef": "catalog.CatalogPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": "/edit/ns/:ns",
      "component": { "$codeRef": "editApplication.EditApplication" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/k8s/ns/:ns/deployments/~new/form", "/k8s/ns/:ns/deployments/:name/form"],
      "component": { "$codeRef": "deployment.DeploymentPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": [
        "/k8s/ns/:ns/deploymentconfigs/~new/form",
        "/k8s/ns/:ns/deploymentconfigs/:name/form"
      ],
      "component": { "$codeRef": "deployment.DeploymentConfigPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/import/all-namespaces", "/import/ns/:ns"],
      "component": { "$codeRef": "import.ImportPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/samples/all-namespaces", "/samples/ns/:ns"],
      "component": { "$codeRef": "import.SamplesCatalog" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/samples/all-namespaces/:is/:isNs", "/samples/ns/:ns/:is/:isNs"],
      "component": { "$codeRef": "import.ImportSamplePage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/catalog/source-to-image"],
      "component": { "$codeRef": "import.ImportPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/k8s/ns/:ns/buildconfigs/~new/form", "/k8s/ns/:ns/buildconfigs/:name/form"],
      "component": { "$codeRef": "buildConfig.BuildConfigFormPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/deploy-image/all-namespaces", "/deploy-image/ns/:ns"],
      "component": { "$codeRef": "import.DeployImagePage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/upload-jar/all-namespaces", "/upload-jar/ns/:ns"],
      "component": { "$codeRef": "import.UploadJarPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "perspective": "dev",
      "exact": false,
      "path": ["/project-details/all-namespaces", "/project-details/ns/:ns"],
      "component": { "$codeRef": "projects.ProjectDetailsPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": false,
      "path": ["/dev-monitoring/ns/:ns/alerts/:ruleID"],
      "component": { "$codeRef": "monitoring.MonitoringAlertsRulesDetailsPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": false,
      "path": ["/dev-monitoring/ns/:ns/rules/:id"],
      "component": { "$codeRef": "monitoring.MonitoringAlertsRulesDetailsPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": false,
      "path": ["/dev-monitoring/all-namespaces", "/dev-monitoring/ns/:ns"],
      "component": { "$codeRef": "monitoring.MonitoringPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/k8s/ns/:ns/:kind/:name/containers/:containerName/health-checks"],
      "component": { "$codeRef": "healthChecks.HealthChecksPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "perspective": "dev",
      "exact": false,
      "path": ["/k8s/all-namespaces/import"],
      "component": { "$codeRef": "import.ImportYamlPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "perspective": "dev",
      "exact": false,
      "path": ["/k8s/all-namespaces/:plural"],
      "component": { "$codeRef": "common.ProjectSelectPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "exact": true,
      "path": ["/workload-hpa/ns/:ns/:resourceRef/:name"],
      "component": { "$codeRef": "hpa.HPAPage" }
    }
  },
  {
    "type": "console.page/route",
    "properties": {
      "perspective": "dev",
      "exact": true,
      "path": ["/search-page/all-namespaces", "/search-page/ns/:ns"],
      "component": { "$codeRef": "common.SearchPage" }
    }
  }
]
