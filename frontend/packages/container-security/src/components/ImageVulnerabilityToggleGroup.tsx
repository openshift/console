import * as React from 'react';
import * as _ from 'lodash';
import { useTranslation } from 'react-i18next';
import { ChartDonut } from '@patternfly/react-charts';
import { SecurityIcon } from '@patternfly/react-icons';
import { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';
import { MsgBox } from '@console/internal/components/utils';
import { totalVulnFor, vulnPriority } from '../const';
import { ImageManifestVuln, Vulnerability } from '../types';
import {
  getFixableVulnerabilitiesCount,
  getVulnerabilityType,
  VulnerabilitiesType,
} from './image-vulnerability-utils';
import './ImageVulnerabilityTogggleGroup.scss';

type ImageVulnerabilityToggleGroupProps = {
  obj: ImageManifestVuln;
};

const ImageVulnerabilityToggleGroup: React.FC<ImageVulnerabilityToggleGroupProps> = ({ obj }) => {
  const { t } = useTranslation();
  const features = obj?.spec?.features;
  const [vulnerabilities, totalVulnCount] = React.useMemo(() => {
    const vulns = _.flatten(features?.map((feature) => feature.vulnerabilities));
    return [vulns, vulns.length];
  }, [features]);
  const [isSelected, setIsSelected] = React.useState(VulnerabilitiesType.allVulnerabilities);
  const [totalSelectedVulnCount, setTotalSelectedVulnCount] = React.useState(totalVulnCount);
  const [totalSelectedVuln, setTotalSelectedVuln] = React.useState<Vulnerability[]>(
    vulnerabilities,
  );
  const handleItemClick = React.useCallback(
    (val: boolean, event: React.MouseEvent<{ [id: string]: VulnerabilitiesType }>) => {
      const { id } = event.currentTarget;
      setIsSelected(id);
      if (id === VulnerabilitiesType.allVulnerabilities) {
        setTotalSelectedVulnCount(totalVulnCount);
        setTotalSelectedVuln(vulnerabilities);
      } else {
        const v = _.filter(
          vulnerabilities,
          (vulnerability) => getVulnerabilityType(vulnerability) === id,
        );
        setTotalSelectedVulnCount(v.length);
        setTotalSelectedVuln(v);
      }
    },
    [vulnerabilities, totalVulnCount],
  );

  return (
    <>
      <ToggleGroup aria-label={t('container-security~Vulnerability type')}>
        <ToggleGroupItem
          buttonId={VulnerabilitiesType.allVulnerabilities}
          isSelected={isSelected === VulnerabilitiesType.allVulnerabilities}
          onChange={handleItemClick}
          text={t('container-security~All vulnerabilities')}
        />
        <ToggleGroupItem
          buttonId={VulnerabilitiesType.appDependency}
          isSelected={isSelected === VulnerabilitiesType.appDependency}
          onChange={handleItemClick}
          text={t('container-security~App dependency')}
        />
        <ToggleGroupItem
          buttonId={VulnerabilitiesType.baseImage}
          isSelected={isSelected === VulnerabilitiesType.baseImage}
          onChange={handleItemClick}
          text={t('container-security~Base image')}
        />
      </ToggleGroup>
      {totalSelectedVulnCount > 0 ? (
        <div className="cs-imagevulnerability-details">
          <div className="cs-imagevulnerability-details__donut">
            <ChartDonut
              colorScale={vulnPriority.map((priority) => priority.color.value).toArray()}
              data={vulnPriority
                .map((priority, key) => ({
                  label: priority.title,
                  x: priority.value,
                  y: totalVulnFor(key)(totalSelectedVuln),
                }))
                .toArray()}
              title={t('container-security~{{totalSelectedVulnCount, number}} total', {
                totalSelectedVulnCount,
              })}
            />
          </div>
          <div className="cs-imagevulnerability-details__summary">
            <h3>
              {t(
                'container-security~Quay Security Scanner has detected {{totalSelectedVulnCount, number}} vulnerabilities.',
                { totalSelectedVulnCount },
              )}
            </h3>
            <h4>
              {t(
                'container-security~Patches are available for {{fixableVulnCount, number}} vulnerabilities.',
                { fixableVulnCount: getFixableVulnerabilitiesCount(totalSelectedVuln) },
              )}
            </h4>
            <div className="cs-imagevulnerability-details__summary-list">
              {vulnPriority
                .map((v, k) =>
                  totalVulnFor(k)(totalSelectedVuln) > 0 ? (
                    <span
                      className="cs-imagevulnerability-details__summary-list--title"
                      key={v.index}
                    >
                      <SecurityIcon color={v.color.value} />{' '}
                      <strong>{totalVulnFor(k)(totalSelectedVuln)}</strong>{' '}
                      {t('container-security~{{title}} vulnerabilities.', { title: v.title })}
                    </span>
                  ) : null,
                )
                .toArray()}
            </div>
          </div>
        </div>
      ) : (
        <div className="cs-imagevulnerability-details__empty-text">
          <MsgBox
            title={t('container-security~No {{isSelected}} vulnerabilities', {
              isSelected: isSelected.toLowerCase(),
            })}
          />
        </div>
      )}
    </>
  );
};

export default ImageVulnerabilityToggleGroup;
