import { screen } from '@testing-library/react';
import { renderWithProviders } from '@console/shared/src/test-utils/unit-test-utils';
import { fakeVulnFor } from '../../../integration-tests/bad-pods';
import { Priority } from '../../const';
import ImageVulnerabilityRow from '../ImageVulnerabilityRow';

jest.mock('@console/internal/components/factory', () => ({
  TableData: ({ children }) => children,
}));

describe('ImageVulnerabilityRow', () => {
  const vuln = fakeVulnFor(Priority.Critical);
  const props = {
    obj: {
      feature: vuln.spec.features[0],
      vulnerability: vuln.spec.features[0].vulnerabilities[0],
    },
    columns: [],
  };

  it('should render vulnerability link', () => {
    renderWithProviders(<ImageVulnerabilityRow {...props} />);

    const link = screen.getByRole('link', { name: /RHSA-2019:1880/ });
    expect(link).toBeVisible();
    expect(link).toHaveAttribute('href', 'https://access.redhat.com/errata/RHSA-2019:1880');
  });

  it('should render all vulnerability data', () => {
    const { container } = renderWithProviders(<ImageVulnerabilityRow {...props} />);

    // TableData mock returns children only (no structure), causing text to flatten.
    // `screen.getByText` can't differentiate individual items, so use `container.textContent`.
    expect(container.textContent).toContain('Critical');
    expect(container.textContent).toContain('libcurl');
    expect(container.textContent).toContain('Base image');
    expect(container.textContent).toContain('Red Hat');
    expect(container.textContent).toContain('7.29.0-51.el7');
    expect(container.textContent).toContain('0:7.29.0-51.el7_6.3');
  });
});
