import * as React from 'react';
import { shallow, ShallowWrapper } from 'enzyme';
import { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';
import { ChartDonut } from '@patternfly/react-charts';
import { MsgBox } from '@console/internal/components/utils';
import ImageVulnerabilityToggleGroup from '../ImageVulnerabilityToggleGroup';
import { fakeVulnFor } from '../../../integration-tests/bad-pods';
import { Priority } from '../../const';
import { VulnerabilitiesType } from '../image-vulnerability-utils';

jest.mock('react-i18next', () => {
  const reactI18next = require.requireActual('react-i18next');
  return {
    ...reactI18next,
    useTranslation: () => ({ t: (key) => key }),
  };
});

describe('ImageVulnerabilityToggleGroup', () => {
  type ImageVulnerabilityToggleGroupProps = React.ComponentProps<
    typeof ImageVulnerabilityToggleGroup
  >;
  const vuln = fakeVulnFor(Priority.Critical);
  const props: ImageVulnerabilityToggleGroupProps = {
    obj: vuln,
  };
  let wrapper: ShallowWrapper<ImageVulnerabilityToggleGroupProps>;

  beforeEach(() => {
    wrapper = shallow(<ImageVulnerabilityToggleGroup {...props} />);
  });

  it('should render ToggleGroup', () => {
    expect(wrapper.find(ToggleGroup).exists()).toBe(true);
  });

  it('should have 3 ToggleGroupItem', () => {
    expect(wrapper.find(ToggleGroupItem)).toHaveLength(3);
  });

  it('should render proper ToggleGroupItem', () => {
    let toggleGroupItem = wrapper.find(ToggleGroupItem).at(0);
    expect(toggleGroupItem.props().text).toBe('container-security~All vulnerabilities');
    toggleGroupItem = wrapper.find(ToggleGroupItem).at(1);
    expect(toggleGroupItem.props().text).toBe('container-security~App dependency');
    toggleGroupItem = wrapper.find(ToggleGroupItem).at(2);
    expect(toggleGroupItem.props().text).toBe('container-security~Base image');
  });

  it('should render ChartDonut when All vulnerabilities group by default', () => {
    expect(wrapper.find(ChartDonut).exists()).toBe(true);
  });

  it('should render empty state when no App dependency group is present', () => {
    const event = { currentTarget: { id: VulnerabilitiesType.appDependency } } as React.MouseEvent;
    wrapper
      .find(ToggleGroupItem)
      .at(1)
      .props()
      .onChange(true, event);
    expect(wrapper.find(ChartDonut).exists()).toBe(false);
    expect(wrapper.find(MsgBox).props().title).toBe(
      'container-security~No {{isSelected}} vulnerabilities',
    );
  });
});
