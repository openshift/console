import { screen, fireEvent } from '@testing-library/react';
import { renderWithProviders } from '@console/shared/src/test-utils/unit-test-utils';
import { fakeVulnFor } from '../../../integration-tests/bad-pods';
import { Priority } from '../../const';
import ImageVulnerabilityToggleGroup from '../ImageVulnerabilityToggleGroup';

describe('ImageVulnerabilityToggleGroup', () => {
  type ImageVulnerabilityToggleGroupProps = React.ComponentProps<
    typeof ImageVulnerabilityToggleGroup
  >;
  const vuln = fakeVulnFor(Priority.Critical);
  const props: ImageVulnerabilityToggleGroupProps = {
    obj: vuln,
  };

  it('should render toggle group with 3 items', () => {
    renderWithProviders(<ImageVulnerabilityToggleGroup {...props} />);

    expect(screen.getByText('All vulnerabilities')).toBeVisible();
    expect(screen.getByText('App dependency')).toBeVisible();
    expect(screen.getByText('Base image')).toBeVisible();
  });

  it('should render chart by default for All vulnerabilities', () => {
    renderWithProviders(<ImageVulnerabilityToggleGroup {...props} />);

    // ChartDonut renders with vulnerability summary
    expect(screen.getByText(/Quay Security Scanner has detected.*vulnerabilities/i)).toBeVisible();
  });

  it('should render empty state when switching to App dependency with no vulnerabilities', () => {
    renderWithProviders(<ImageVulnerabilityToggleGroup {...props} />);

    const appDependencyButton = screen.getByText('App dependency');
    fireEvent.click(appDependencyButton);

    expect(screen.getByText(/No.*app dependency.*vulnerabilities/i)).toBeVisible();
  });
});
