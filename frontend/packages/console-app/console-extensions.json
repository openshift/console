[
  {
    "type": "console.perspective",
    "properties": {
      "id": "admin",
      "default": true,
      "name": "%console-app~Administrator%",
      "icon": { "$codeRef": "perspective.icon" },
      "landingPageURL": { "$codeRef": "perspective.getLandingPageURL" },
      "importRedirectURL": { "$codeRef": "perspective.getImportRedirectURL" }
    }
  },
  {
    "type": "console.flag/model",
    "properties": {
      "flag": "DEVWORKSPACE",
      "model": {
        "group": "workspace.devfile.io",
        "version": "v1alpha1",
        "kind": "DevWorkspace"
      }
    }
  },
  {
    "type": "console.flag/model",
    "properties": {
      "flag": "v1alpha2DEVWORKSPACE",
      "model": {
        "group": "workspace.devfile.io",
        "version": "v1alpha2",
        "kind": "DevWorkspace"
      }
    }
  },
  {
    "type": "console.context-provider",
    "properties": {
      "provider": { "$codeRef": "tourContext.TourContextProvider" },
      "useValueHook": { "$codeRef": "tourContext.useTourValuesForContext" }
    }
  },
  {
    "type": "console.context-provider",
    "properties": {
      "provider": { "$codeRef": "quickStartContext.QuickStartContextProvider" },
      "useValueHook": { "$codeRef": "quickStartContext.useValuesForQuickStartContext" }
    }
  },
  {
    "type": "console.context-provider",
    "properties": {
      "provider": { "$codeRef": "fileUploadContext.FileUploadContextProvider" },
      "useValueHook": { "$codeRef": "fileUploadContext.useValuesFileUploadContext" }
    }
  },
  {
    "type": "console.redux-reducer",
    "properties": {
      "scope": "console",
      "reducer": { "$codeRef": "reduxReducer" }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "id": "volumesnapshotcontents",
      "section": "storage",
      "name": "%console-app~VolumeSnapshotContents%",
      "insertAfter": "volumesnapshotclasses",
      "model": {
        "group": "snapshot.storage.k8s.io",
        "kind": "VolumeSnapshotContent",
        "version": "v1"
      }
    },
    "flags": {
      "required": ["CAN_LIST_VSC"]
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "Deployment"
      },
      "provider": { "$codeRef": "actions.useCreateServiceBindingProvider" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps.openshift.io",
        "version": "v1",
        "kind": "DeploymentConfig"
      },
      "provider": { "$codeRef": "actions.useCreateServiceBindingProvider" }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "serving.knative.dev",
        "version": "v1",
        "kind": "Service"
      },
      "provider": {
        "$codeRef": "actions.useCreateServiceBindingProvider"
      }
    },
    "flags": {
      "required": ["ALLOW_SERVICE_BINDING"]
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "Deployment"
      },
      "provider": { "$codeRef": "actions.useDeploymentActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps.openshift.io",
        "version": "v1",
        "kind": "DeploymentConfig"
      },
      "provider": { "$codeRef": "actions.useDeploymentConfigActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "StatefulSet"
      },
      "provider": { "$codeRef": "actions.useStatefulSetActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "DaemonSet"
      },
      "provider": { "$codeRef": "actions.useDaemonSetActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "batch",
        "version": "v1",
        "kind": "Job"
      },
      "provider": { "$codeRef": "actions.useJobActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "batch",
        "version": "v1",
        "kind": "CronJob"
      },
      "provider": { "$codeRef": "actions.useCronJobActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "version": "v1",
        "kind": "Pod"
      },
      "provider": { "$codeRef": "actions.usePodActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "ReplicaSet"
      },
      "provider": { "$codeRef": "actions.useReplicaSetActionsProvider" }
    }
  },
  {
    "type": "console.action/resource-provider",
    "properties": {
      "model": {
        "version": "v1",
        "kind": "ReplicationController"
      },
      "provider": { "$codeRef": "actions.useReplicationControllerActionsProvider" }
    }
  },
  {
    "type": "console.user-preference/group",
    "properties": {
      "id": "general",
      "label": "%console-app~General%"
    }
  },
  {
    "type": "console.user-preference/group",
    "properties": {
      "id": "language",
      "label": "%console-app~Language%"
    }
  },
  {
    "type": "console.user-preference/group",
    "properties": {
      "id": "notifications",
      "label": "%console-app~Notifications%"
    }
  },
  {
    "type": "console.user-preference/group",
    "properties": {
      "id": "applications",
      "label": "%console-app~Applications%"
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.theme",
      "label": "%console-app~Theme%",
      "groupId": "general",
      "description": "%console-app~Console will appear as per the selected theme.%",
      "field": {
        "type": "dropdown",
        "userSettingsKey": "console.theme",
        "defaultValue": "systemDefault",
        "options": [
          {
            "value": "systemDefault",
            "label": "%console-app~System default%"
          },
          { "value": "light", "label": "%console-app~Light%" },
          { "value": "dark", "label": "%console-app~Dark%" }
        ]
      }
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.preferredPerspective",
      "label": "%console-app~Perspective%",
      "groupId": "general",
      "description": "%console-app~If a perspective is not selected, the console defaults to the last viewed.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "userPreferences.PerspectiveDropdown" }
      },
      "insertAfter": "console.theme"
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.namespace.favorite",
      "label": "%console-app~Project%",
      "groupId": "general",
      "description": "%console-app~If a project is not selected, the console defaults to the last viewed.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "userPreferences.NamespaceDropdown" }
      },
      "insertBefore": "topology.preferredView"
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.preferredCreateEditMethod",
      "label": "%console-app~Create/Edit resource method%",
      "groupId": "general",
      "description": "%console-app~If both form and YAML are available, the console defaults to your selection.%",
      "field": {
        "type": "dropdown",
        "userSettingsKey": "console.preferredCreateEditMethod",
        "defaultValue": "latest",
        "options": [
          {
            "value": "latest",
            "label": "%console-app~Last viewed%"
          },
          { "value": "form", "label": "%console-app~Form%" },
          { "value": "yaml", "label": "%console-app~YAML%" }
        ]
      },
      "insertAfter": "topology.preferredView"
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.preferredLanguage",
      "label": "%console-app~Language%",
      "groupId": "language",
      "description": "%console-app~Select the language you want to use for the console.%",
      "field": {
        "type": "custom",
        "component": { "$codeRef": "userPreferences.LanguageDropdown" }
      }
    }
  },
  {
    "type": "console.user-preference/item",
    "properties": {
      "id": "console.hideUserWorkloadNotifications",
      "label": "%console-app~User workload notifications%",
      "groupId": "notifications",
      "description": "%console-app~Do not display notifications created by users for specific projects on the cluster overview page or notification drawer.%",
      "field": {
        "type": "checkbox",
        "userSettingsKey": "console.hideUserWorkloadNotifications",
        "label": "%console-app~Hide user workload notifications%",
        "trueValue": true,
        "falseValue": false,
        "defaultValue": false
      }
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "home",
      "name": "%console-app~Home%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-home" }
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "operators",
      "name": "%console-app~Operators%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-operators" },
      "insertAfter": "home"
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "workloads",
      "name": "%console-app~Workloads%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-workloads" },
      "insertAfter": "operators"
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "networking",
      "name": "%console-app~Networking%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-networking" },
      "insertAfter": "workloads"
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "storage",
      "name": "%console-app~Storage%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-storage" }
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "builds",
      "name": "%console-app~Builds%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-builds" }
    },
    "flags": { "required": ["OPENSHIFT"] }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "compute",
      "name": "%console-app~Compute%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-compute" }
    },
    "flags": { "required": ["CAN_LIST_NODE"] }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "usermanagement",
      "name": "%console-app~User Management%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-usermanagement" }
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "administration",
      "name": "%console-app~Administration%",
      "dataAttributes": { "data-quickstart-id": "qs-nav-administration" }
    }
  },
  {
    "type": "console.navigation/section",
    "properties": {
      "perspective": "admin",
      "id": "observe",
      "insertBefore": ["compute", "usermanagement"],
      "name": "%console-app~Observe%",
      "dataAttributes": {
        "data-quickstart-id": "qs-nav-monitoring"
      }
    },
    "flags": {
      "required": ["PROMETHEUS", "MONITORING", "CAN_GET_NS"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "home",
      "id": "dashboards",
      "name": "%console-app~Overview%",
      "href": "/dashboards"
    },
    "flags": {
      "required": ["CAN_GET_NS", "OPENSHIFT", "PROMETHEUS", "MONITORING"]
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "home",
      "id": "projects",
      "insertAfter": "dashboards",
      "name": "%console-app~Projects%",
      "model": {
        "group": "project.openshift.io",
        "version": "v1",
        "kind": "Project"
      }
    },
    "flags": { "required": ["OPENSHIFT"] }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "home",
      "id": "search",
      "insertAfter": "projects",
      "name": "%console-app~Search%",
      "href": "/search",
      "namespaced": true
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "home",
      "id": "explore",
      "insertAfter": "search",
      "name": "%console-app~API Explorer%",
      "href": "/api-explorer",
      "startsWith": ["api-resource"]
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "home",
      "id": "events",
      "insertAfter": "explore",
      "name": "%console-app~Events%",
      "href": "/events",
      "prefixNamespaced": true
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "pods",
      "name": "%console-app~Pods%",
      "model": {
        "version": "v1",
        "kind": "Pod"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "deployments",
      "insertAfter": "pods",
      "name": "%console-app~Deployments%",
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "Deployment"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "deploymentconfigs",
      "insertAfter": "deployments",
      "name": "%console-app~DeploymentConfigs%",
      "model": {
        "group": "apps.openshift.io",
        "version": "v1",
        "kind": "DeploymentConfig"
      }
    },
    "flags": { "required": ["OPENSHIFT"] }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "statefulsets",
      "insertAfter": "deploymentconfigs",
      "name": "%console-app~StatefulSets%",
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "StatefulSet"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "secrets",
      "insertAfter": "statefulsets",
      "name": "%console-app~Secrets%",
      "model": {
        "version": "v1",
        "kind": "Secret"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "configmaps",
      "insertAfter": "secrets",
      "name": "%console-app~ConfigMaps%",
      "model": {
        "version": "v1",
        "kind": "ConfigMap"
      }
    }
  },
  {
    "type": "console.navigation/separator",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "WorkloadsSeparator",
      "insertAfter": "configmaps",
      "testID": "WorkloadsSeparator"
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "cronjobs",
      "insertAfter": "WorkloadsSeparator",
      "name": "%console-app~CronJobs%",
      "model": {
        "group": "batch",
        "version": "v1",
        "kind": "CronJob"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "jobs",
      "insertAfter": "cronjobs",
      "name": "%console-app~Jobs%",
      "model": {
        "group": "batch",
        "version": "v1",
        "kind": "Job"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "daemonsets",
      "insertAfter": "jobs",
      "name": "%console-app~DaemonSets%",
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "DaemonSet"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "replicasets",
      "insertAfter": "daemonsets",
      "name": "%console-app~ReplicaSets%",
      "model": {
        "group": "apps",
        "version": "v1",
        "kind": "ReplicaSet"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "replicationcontrollers",
      "insertAfter": "replicasets",
      "name": "%console-app~ReplicationControllers%",
      "model": {
        "version": "v1",
        "kind": "ReplicationController"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "horizontalpodautoscalers",
      "insertAfter": "replicationcontrollers",
      "name": "%console-app~HorizontalPodAutoscalers%",
      "model": {
        "group": "autoscaling",
        "version": "v2beta2",
        "kind": "HorizontalPodAutoscaler"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "workloads",
      "id": "poddisruptionbudgets",
      "insertAfter": "horizontalpodautoscalers",
      "name": "%console-app~PodDisruptionBudgets%",
      "model": {
        "group": "policy",
        "version": "v1",
        "kind": "PodDisruptionBudget"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "networking",
      "id": "services",
      "name": "%console-app~Services%",
      "model": {
        "version": "v1",
        "kind": "Service"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "networking",
      "id": "routes",
      "insertAfter": "services",
      "name": "%console-app~Routes%",
      "model": {
        "group": "route.openshift.io",
        "version": "v1",
        "kind": "Route"
      }
    },
    "flags": { "required": ["OPENSHIFT"] }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "networking",
      "id": "ingresses",
      "insertAfter": "routes",
      "name": "%console-app~Ingresses%",
      "model": {
        "group": "networking.k8s.io",
        "version": "v1",
        "kind": "Ingress"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "networking",
      "id": "networkpolicies",
      "insertAfter": "ingresses",
      "name": "%console-app~NetworkPolicies%",
      "model": {
        "group": "networking.k8s.io",
        "version": "v1",
        "kind": "NetworkPolicy"
      }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "storage",
      "id": "persistentvolumes",
      "name": "%console-app~PersistentVolumes%",
      "model": {
        "version": "v1",
        "kind": "PersistentVolume"
      }
    },
    "flags": { "required": ["CAN_LIST_PV"] }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "storage",
      "id": "persistentvolumeclaims",
      "insertAfter": "persistentvolumes",
      "name": "%console-app~PersistentVolumeClaims%",
      "model": {
        "version": "v1",
        "kind": "PersistentVolumeClaim"
      }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "storage",
      "id": "storageclasses",
      "insertAfter": "persistentvolumeclaims",
      "name": "%console-app~StorageClasses%",
      "model": {
        "group": "storage.k8s.io",
        "version": "v1",
        "kind": "StorageClass"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "storage",
      "id": "volumesnapshots",
      "insertAfter": "storageclasses",
      "name": "%console-app~VolumeSnapshots%",
      "model": {
        "group": "snapshot.storage.k8s.io",
        "version": "v1",
        "kind": "VolumeSnapshot"
      }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "storage",
      "id": "volumesnapshotclasses",
      "insertAfter": "volumesnapshots",
      "name": "%console-app~VolumeSnapshotClasses%",
      "model": {
        "group": "snapshot.storage.k8s.io",
        "version": "v1",
        "kind": "VolumeSnapshotClass"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "builds",
      "id": "buildconfigs",
      "name": "%console-app~BuildConfigs%",
      "model": {
        "group": "build.openshift.io",
        "version": "v1",
        "kind": "BuildConfig"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "builds",
      "id": "builds",
      "insertAfter": "buildconfigs",
      "name": "%console-app~Builds%",
      "model": {
        "group": "build.openshift.io",
        "version": "v1",
        "kind": "Build"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "builds",
      "id": "imagestreams",
      "insertAfter": "builds",
      "name": "%console-app~ImageStreams%",
      "startsWith": ["imagestreamtags"],
      "model": {
        "group": "image.openshift.io",
        "version": "v1",
        "kind": "ImageStream"
      }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "nodes",
      "name": "%console-app~Nodes%",
      "model": {
        "version": "v1",
        "kind": "Node"
      }
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machines",
      "insertAfter": "nodes",
      "name": "%console-app~Machines%",
      "href": "/k8s/ns/openshift-machine-api/machine.openshift.io~v1beta1~Machine"
    },
    "flags": { "required": ["CLUSTER_API"] }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machinesets",
      "insertAfter": "machines",
      "name": "%console-app~MachineSets%",
      "href": "/k8s/ns/openshift-machine-api/machine.openshift.io~v1beta1~MachineSet"
    },
    "flags": { "required": ["CLUSTER_API"] }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machzineautoscaler",
      "insertAfter": "machinesets",
      "name": "%console-app~MachineAutoscalers%",
      "href": "/k8s/ns/openshift-machine-api/autoscaling.openshift.io~v1beta1~MachineAutoscaler"
    },
    "flags": { "required": ["MACHINE_AUTOSCALER"] }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machinehealthchecks",
      "insertAfter": "machzineautoscaler",
      "name": "%console-app~MachineHealthChecks%",
      "href": "/k8s/ns/openshift-machine-api/machine.openshift.io~v1beta1~MachineHealthCheck"
    },
    "flags": { "required": ["MACHINE_HEALTH_CHECK"] }
  },
  {
    "type": "console.navigation/separator",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "computeseparator",
      "insertAfter": "machinehealthchecks",
      "testID": "ComputeSeparator"
    },
    "flags": { "required": ["MACHINE_CONFIG"] }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machineconfigs",
      "insertAfter": "computeseparator",
      "name": "%console-app~MachineConfigs%",
      "model": {
        "group": "machineconfiguration.openshift.io",
        "version": "v1",
        "kind": "MachineConfig"
      }
    },
    "flags": { "required": ["MACHINE_CONFIG"] }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "compute",
      "id": "machineconfigpools",
      "insertAfter": "machineconfigs",
      "name": "%console-app~MachineConfigPools%",
      "model": {
        "group": "machineconfiguration.openshift.io",
        "version": "v1",
        "kind": "MachineConfigPool"
      }
    },
    "flags": { "required": ["MACHINE_CONFIG"] }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "usermanagement",
      "id": "users",
      "name": "%console-app~Users%",
      "model": {
        "group": "user.openshift.io",
        "version": "v1",
        "kind": "User"
      }
    },
    "flags": { "required": ["OPENSHIFT", "CAN_LIST_USERS"] }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "usermanagement",
      "id": "groups",
      "insertAfter": "users",
      "name": "%console-app~Groups%",
      "model": {
        "group": "user.openshift.io",
        "version": "v1",
        "kind": "Group"
      }
    },
    "flags": { "required": ["OPENSHIFT", "CAN_LIST_GROUPS"] }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "usermanagement",
      "id": "serviceaccounts",
      "insertAfter": "groups",
      "name": "%console-app~ServiceAccounts%",
      "model": {
        "version": "v1",
        "kind": "ServiceAccount"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "usermanagement",
      "id": "roles",
      "insertAfter": "serviceaccounts",
      "name": "%console-app~Roles%",
      "startsWith": ["clusterroles"],
      "model": {
        "group": "rbac.authorization.k8s.io",
        "version": "v1",
        "kind": "Role"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "usermanagement",
      "id": "rolebindings",
      "insertAfter": "roles",
      "name": "%console-app~RoleBindings%",
      "startsWith": ["clusterrolebindings"],
      "model": {
        "group": "rbac.authorization.k8s.io",
        "version": "v1",
        "kind": "RoleBinding"
      }
    }
  },
  {
    "type": "console.navigation/href",
    "properties": {
      "perspective": "admin",
      "section": "administration",
      "id": "clustersettings",
      "name": "%console-app~Cluster Settings%",
      "href": "/settings/cluster",
      "startsWith": [
        "settings/idp",
        "config.openshift.io",
        "monitoring/alertmanagerconfig",
        "monitoring/alertmanageryaml"
      ]
    },
    "flags": { "required": ["CLUSTER_VERSION"] }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "administration",
      "id": "namespaces",
      "insertAfter": "clustersettings",
      "name": "%console-app~Namespaces%",
      "model": {
        "version": "v1",
        "kind": "Namespace"
      }
    },
    "flags": { "required": ["CAN_LIST_NS"] }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "administration",
      "id": "resourcequotas",
      "insertAfter": "namespaces",
      "name": "%console-app~ResourceQuotas%",
      "startsWith": ["clusterresourcequotas"],
      "model": {
        "version": "v1",
        "kind": "ResourceQuota"
      }
    }
  },
  {
    "type": "console.navigation/resource-ns",
    "properties": {
      "perspective": "admin",
      "section": "administration",
      "id": "limitranges",
      "insertAfter": "resourcequotas",
      "name": "%console-app~LimitRanges%",
      "model": {
        "version": "v1",
        "kind": "LimitRange"
      }
    }
  },
  {
    "type": "console.navigation/resource-cluster",
    "properties": {
      "perspective": "admin",
      "section": "administration",
      "id": "customresourcedefinitions",
      "insertAfter": "metering",
      "name": "%console-app~CustomResourceDefinitions%",
      "model": {
        "group": "apiextensions.k8s.io",
        "version": "v1",
        "kind": "CustomResourceDefinition"
      }
    },
    "flags": { "required": ["CAN_LIST_CRD"] }
  },
  {
    "type": "console.navigation/href",
    "flags": {
      "required": ["PROMETHEUS", "MONITORING", "CAN_GET_NS"]
    },
    "properties": {
      "perspective": "admin",
      "section": "observe",
      "id": "monitoringalerts",
      "name": "%console-app~Alerting%",
      "href": "/monitoring/alerts",
      "startsWith": ["monitoring/alertrules", "monitoring/silences"]
    }
  },
  {
    "type": "console.navigation/href",
    "flags": {
      "required": ["PROMETHEUS", "MONITORING", "CAN_GET_NS"]
    },
    "properties": {
      "perspective": "admin",
      "section": "observe",
      "id": "monitoringmetrics",
      "insertAfter": "monitoringalerts",
      "href": "/monitoring/query-browser",
      "name": "%console-app~Metrics%"
    }
  },
  {
    "type": "console.navigation/href",
    "flags": {
      "required": ["PROMETHEUS", "MONITORING", "CAN_GET_NS"]
    },
    "properties": {
      "perspective": "admin",
      "section": "observe",
      "id": "monitoringdashboards",
      "insertAfter": "monitoringmetrics",
      "name": "%console-app~Dashboards%",
      "href": "/monitoring/dashboards"
    }
  },
  {
    "type": "console.navigation/href",
    "flags": {
      "required": ["PROMETHEUS", "MONITORING", "CAN_GET_NS"]
    },
    "properties": {
      "perspective": "admin",
      "section": "observe",
      "id": "monitoringtargets",
      "insertAfter": "monitoringdashboards",
      "name": "%console-app~Targets%",
      "href": "/monitoring/targets"
    }
  },
  {
    "type": "console.dashboards/overview/health/resource",
    "properties": {
      "title": "%console-app~Dynamic Plugins%",
      "resources": { "$codeRef": "dynamicPluginsHealthResource.dynamicPluginsResources" },
      "healthHandler": { "$codeRef": "dynamicPluginsHealthResource.getDynamicPluginHealthState" },
      "popupComponent": { "$codeRef": "dynamicPluginsHealthResource.DynamicPluginsPopover" },
      "popupTitle": "%console-app~Dynamic Plugin status%"
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "CSI": {
        "title": "%console-app~AWS CSI%",
        "provisioner": "ebs.csi.aws.com",
        "allowVolumeExpansion": true,
        "parameters": {
          "type": {
            "name": "%console-app~Type%",
            "values": {
              "gp3": "gp3",
              "gp2": "gp2",
              "io1": "io1",
              "sc1": "sc1",
              "st1": "st1",
              "standard": "standard"
            },
            "hintText": "%console-app~Select AWS Type. Default is gp3%"
          },
          "iopsPerGB": {
            "name": "%console-app~IOPS per GiB%",
            "hintText": "%console-app~I/O operations per second per GiB%",
            "validation": { "$codeRef": "storageProvisioners.validateAWSIopsPerGB" },
            "visible": true
          },
          "fsType": {
            "name": "%console-app~Filesystem Type%",
            "hintText": "%console-app~Filesystem type to use during volume creation. Default is ext4.%",
            "values": { "ext4": "ext4", "xfs": "xfs", "ext2": "ext2", "ext3": "ext3" }
          },
          "encrypted": {
            "name": "%console-app~Encrypted%",
            "type": "checkbox",
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          },
          "kmsKeyId": {
            "name": "%console-app~KMS key ID%",
            "hintText": "%console-app~The full Amazon resource name of the key to use when encrypting the volume%",
            "visible": { "$codeRef": "storageProvisioners.isAWSKmsKeyIdVisible" }
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Local%",
        "provisioner": "kubernetes.io/no-provisioner",
        "documentationLink": { "$codeRef": "storageProvisionerDocs.LOCAL" },
        "volumeBindingMode": "WaitForFirstConsumer"
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~AWS Elastic Block Storage%",
        "provisioner": "kubernetes.io/aws-ebs",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.AWS_EBS" },
        "parameters": {
          "type": {
            "name": "Type",
            "values": { "io1": "io1", "gp2": "gp2", "sc1": "sc1", "st1": "st1" },
            "hintText": "Select AWS Type"
          },
          "iopsPerGB": {
            "name": "%console-app~IOPS per GiB%",
            "hintText": "%console-app~I/O operations per second per GiB%",
            "validation": { "$codeRef": "storageProvisioners.validateAWSIopsPerGB" },
            "visible": { "$codeRef": "storageProvisioners.isAWSIopsPerGBVisible" }
          },
          "fsType": {
            "name": "%console-app~Filesystem type%",
            "hintText": "%console-app~Filesystem type to use during volume creation. Default is ext4.%"
          },
          "encrypted": {
            "name": "%console-app~Encrypted%",
            "type": "checkbox",
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          },
          "kmsKeyId": {
            "name": "%console-app~KMS key ID%",
            "hintText": "%console-app~The full Amazon resource name of the key to use when encrypting the volume%",
            "visible": { "$codeRef": "storageProvisioners.isAWSKmsKeyIdVisible" }
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~GCE PD%",
        "provisioner": "kubernetes.io/gce-pd",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.GCE" },
        "parameters": {
          "type": {
            "name": "Type",
            "values": {
              "pd-standard": "pd-standard",
              "pd-ssd": "pd-ssd"
            },
            "hintText": "Select GCE type"
          },
          "zone": {
            "name": "Zone",
            "validation": { "$codeRef": "storageProvisioners.validateGcePdZone" }
          },
          "zones": {
            "name": "Zones",
            "validation": { "$codeRef": "storageProvisioners.validateGcePdZones" }
          },
          "replication-type": {
            "name": "Replication type",
            "values": {
              "none": "none",
              "regional-pd": "regional-pd"
            },
            "hintText": "Select Replication type",
            "validation": { "$codeRef": "storageProvisioners.validateGCEReplicationType" }
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Glusterfs%",
        "provisioner": "kubernetes.io/glusterfs",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.GLUSTER" },
        "parameters": {
          "resturl": {
            "name": "Gluster REST/Heketi URL",
            "required": true
          },
          "restuser": {
            "name": "%console-app~Gluster REST/Heketi user%"
          },
          "secretNamespace": {
            "name": "%console-app~Secret Namespace%"
          },
          "secretName": {
            "name": "%console-app~Secret name%"
          },
          "clusterid": {
            "name": "%console-app~Cluster ID%"
          },
          "gidMin": {
            "name": "%console-app~GID min%",
            "validation": { "$codeRef": "storageProvisioners.validateGlusterGidMin" }
          },
          "gidMax": {
            "name": "%console-app~GID max%",
            "validation": { "$codeRef": "storageProvisioners.validateGlusterGidMax" }
          },
          "volumetype": {
            "name": "%console-app~Volume type%"
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~OpenStack Cinder%",
        "provisioner": "kubernetes.io/cinder",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.OPENSTACK_CINDER" },
        "parameters": {
          "type": {
            "name": "%console-app~Volume type%"
          },
          "availability": {
            "name": "%console-app~Availability zone%"
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Azure File%",
        "provisioner": "kubernetes.io/azure-file",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.AZURE_FILE" },
        "parameters": {
          "skuName": {
            "name": "%console-app~SKU name%",
            "hintText": "%console-app~Azure storage account SKU tier%"
          },
          "location": {
            "name": "%console-app~Location%",
            "hintText": "%console-app~Azure storage account location%"
          },
          "storageAccount": {
            "name": "%console-app~Azure storage account name%",
            "hintText": "%console-app~Azure storage account name%"
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Azure Disk%",
        "provisioner": "kubernetes.io/azure-disk",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.AZURE_DISK" },
        "parameters": {
          "storageaccounttype": {
            "name": "%console-app~Storage account type%",
            "hintText": "%console-app~Storage account type%"
          },
          "kind": {
            "name": "%console-app~Account kind%",
            "values": { "shared": "shared", "dedicated": "dedicated", "managed": "managed" },
            "hintText": "%console-app~Select account kind%"
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Quobyte%",
        "provisioner": "kubernetes.io/quobyte",
        "allowVolumeExpansion": false,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.QUOBYTE" },
        "parameters": {
          "quobyteAPIServer": {
            "name": "%console-app~Quobyte API server%",
            "hintText": "%console-app~Quobyte API server%"
          },
          "registry": {
            "name": "%console-app~Registry address(es)%",
            "hintText": "%console-app~Registry address(es)%"
          },
          "adminSecretName": {
            "name": "%console-app~Admin secret name%",
            "hintText": "%console-app~Admin secret name%"
          },
          "adminSecretNamespace": {
            "name": "%console-app~Admin secret namespace%",
            "hintText": "%console-app~Admin secret namespace%"
          },
          "user": {
            "name": "%console-app~User%",
            "hintText": "User"
          },
          "group": {
            "name": "%console-app~Group%",
            "hintText": "%console-app~Group%"
          },
          "quobyteConfig": {
            "name": "%console-app~Quobyte configuration%",
            "hintText": "%console-app~Quobyte configuration%"
          },
          "quobyteTenant": {
            "name": "%console-app~Quobyte tenant%",
            "hintText": "%console-app~Quobyte tenant ID used to create/delete the volume%"
          }
        }
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~vSphere Volume%",
        "provisioner": "kubernetes.io/vsphere-volume",
        "allowVolumeExpansion": false,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.VSPHERE" },
        "parameters": {
          "diskformat": {
            "name": "Disk format",
            "values": {
              "thin": "thin",
              "zeroedthick": "zeroed thick",
              "eagerzeroedthick": "eager zeroed thick"
            },
            "hintText": "Select disk format"
          },
          "datastore": {
            "name": "%console-app~Datastore%",
            "hintText": "%console-app~Datastore%"
          }
        },
        "volumeBindingMode": "Immediate"
      }
    }
  },
  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "%console-app~Portworx Volume%",
        "provisioner": "kubernetes.io/portworx-volume",
        "allowVolumeExpansion": true,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.PORTWORX_VOLUME" },
        "parameters": {
          "fs": {
            "name": "Filesystem",
            "values": {
              "none": "none",
              "xfs": "xfs",
              "ext4": "ext4"
            },
            "hintText": "Select Filesystem"
          },
          "block_size": {
            "name": "%console-app~Block size%",
            "hintText": "%console-app~Block size in Kb%",
            "validation": { "$codeRef": "storageProvisioners.validatePortworxBlockSize" }
          },
          "repl": {
            "name": "%console-app~Number of synchronous replicas to be provided in the form of replication factor%",
            "hintText": "%console-app~Number of replicas%",
            "validation": { "$codeRef": "storageProvisioners.validatePortworxReplicas" }
          },
          "io_priority": {
            "name": "%console-app~I/O priority%",
            "values": {
              "high": "high",
              "medium": "medium",
              "low": "low"
            },
            "hintText": "%console-app~I/O priority%"
          },
          "snap_interval": {
            "name": "%console-app~Snapshot interval%",
            "hintText": "%console-app~Clock/time interval in minutes for when to trigger snapshots%",
            "validation": { "$codeRef": "storageProvisioners.validatePortworxSnapshotInterval" },
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          },
          "aggregation_level": {
            "name": "%console-app~Aggregation level%",
            "hintText": "%console-app~The number of chunks the volume would be distributed into%",
            "validation": { "$codeRef": "storageProvisioners.validatePortworxAggregationLevel" },
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          },
          "ephemeral": {
            "name": "%console-app~Ephemeral%",
            "type": "checkbox",
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          }
        }
      }
    }
  },

  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "ScaleIO",
        "provisioner": "kubernetes.io/scaleio",
        "allowVolumeExpansion": false,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.SCALEIO" },
        "parameters": {
          "gateway": {
            "name": "%console-app~API gateway%",
            "required": true,
            "hintText": "%console-app~ScaleIO API gateway address%"
          },
          "system": {
            "name": "%console-app~System name%",
            "required": true,
            "hintText": "%console-app~Name of the ScaleIO system%"
          },
          "protectionDomain": {
            "name": "%console-app~Protection domain%",
            "required": true,
            "hintText": "%console-app~Name of the ScaleIO protection domain%"
          },
          "storagePool": {
            "name": "%console-app~Storage pool%",
            "required": true,
            "hintText": "%console-app~Name of the volume storage pool%"
          },
          "storageMode": {
            "name": "%console-app~Storage mode%",
            "values": {
              "thinProvisioned": "ThinProvisioned",
              "thickProvisioned": "ThickProvisioned"
            },
            "hintText": "%console-app~Select storage provision mode%"
          },
          "secretRef": {
            "name": "%console-app~Secret reference%",
            "required": true,
            "hintText": "Reference to a configured Secret object"
          },
          "readOnly": {
            "name": "%console-app~Read Only%",
            "type": "checkbox",
            "format": { "$codeRef": "storageProvisioners.formatToString" }
          },
          "fsType": {
            "name": "%console-app~Filesystem Type%",
            "hintText": "%console-app~Filesystem to use for the volume%"
          }
        }
      }
    }
  },

  {
    "type": "console.storage-class/provisioner",
    "properties": {
      "OTHERS": {
        "title": "StorageOS",
        "provisioner": "kubernetes.io/storageos",
        "allowVolumeExpansion": false,
        "documentationLink": { "$codeRef": "storageProvisionerDocs.STORAGEOS" },
        "parameters": {
          "pool": {
            "name": "%console-app~Pool%",
            "hintText": "%console-app~Name of the StorageOS distributed capacity pool from which to provision the volume%"
          },
          "description": {
            "name": "%console-app~Description%",
            "hintText": "%console-app~Description to assign to volumes that were created dynamically%"
          },
          "fsType": {
            "name": "%console-app~Filesystem type%",
            "hintText": "%console-app~Default filesystem type to request%"
          },
          "adminSecretName": {
            "name": "%console-app~Admin secret name%",
            "hintText": "%console-app~Name of the secret to use for obtaining the StorageOS API credentials%"
          },
          "adminSecretNamespace": {
            "name": "%console-app~Admin secret namespace%",
            "hintText": "%console-app~Namespace where the API configuration secret is located%",
            "required": { "$codeRef": "storageProvisioners.isStorageOsAdminSecretNSRequired" }
          }
        }
      }
    }
  }
]
