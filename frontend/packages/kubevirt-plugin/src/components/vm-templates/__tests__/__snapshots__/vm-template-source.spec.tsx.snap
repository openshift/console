// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TemplateSource /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "pxe-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "annotations": Object {
                "kubevirt.ui/firstBoot": "true",
                "kubevirt.ui/pxeInterface": "eth1",
              },
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                        Object {
                          "bootOrder": 1,
                          "bridge": Object {},
                          "name": "eth1",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                    Object {
                      "multus": Object {
                        "networkName": "pxe-net-conf",
                      },
                      "name": "eth1",
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "error": undefined,
      "source": undefined,
      "type": ProvisionSource {
        "getValue": [Function],
        "serialize": [Function],
        "toString": [Function],
        "value": "PXE",
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "error": undefined,
        "source": undefined,
        "type": ProvisionSource {
          "getValue": [Function],
          "serialize": [Function],
          "toString": [Function],
          "value": "PXE",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`<TemplateSource /> renders correctly 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    detailed={true}
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "pxe-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "annotations": Object {
                "kubevirt.ui/firstBoot": "true",
                "kubevirt.ui/pxeInterface": "eth1",
              },
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                        Object {
                          "bootOrder": 1,
                          "bridge": Object {},
                          "name": "eth1",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                    Object {
                      "multus": Object {
                        "networkName": "pxe-net-conf",
                      },
                      "name": "eth1",
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Type
          detailed={true}
          source={undefined}
          type={
            ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "PXE",
            }
          }
        />,
        <Source
          error={undefined}
          source={undefined}
          type={
            ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "PXE",
            }
          }
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "detailed": true,
          "source": undefined,
          "type": ProvisionSource {
            "getValue": [Function],
            "serialize": [Function],
            "toString": [Function],
            "value": "PXE",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "error": undefined,
          "source": undefined,
          "type": ProvisionSource {
            "getValue": [Function],
            "serialize": [Function],
            "toString": [Function],
            "value": "PXE",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Type
            detailed={true}
            source={undefined}
            type={
              ProvisionSource {
                "getValue": [Function],
                "serialize": [Function],
                "toString": [Function],
                "value": "PXE",
              }
            }
          />,
          <Source
            error={undefined}
            source={undefined}
            type={
              ProvisionSource {
                "getValue": [Function],
                "serialize": [Function],
                "toString": [Function],
                "value": "PXE",
              }
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "detailed": true,
            "source": undefined,
            "type": ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "PXE",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "error": undefined,
            "source": undefined,
            "type": ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "PXE",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`<TemplateSource /> renders correctly 3`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "container-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "disks": Array [
                        Object {
                          "bootOrder": 1,
                          "disk": Object {
                            "bus": "virtio",
                          },
                          "name": "rootdisk",
                        },
                      ],
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                  "volumes": Array [
                    Object {
                      "containerDisk": Object {
                        "image": "fooContainer",
                      },
                      "name": "rootdisk",
                    },
                  ],
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "error": undefined,
      "source": "fooContainer",
      "type": ProvisionSource {
        "getValue": [Function],
        "serialize": [Function],
        "toString": [Function],
        "value": "Container",
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "error": undefined,
        "source": "fooContainer",
        "type": ProvisionSource {
          "getValue": [Function],
          "serialize": [Function],
          "toString": [Function],
          "value": "Container",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`<TemplateSource /> renders correctly 4`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    detailed={true}
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "container-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "disks": Array [
                        Object {
                          "bootOrder": 1,
                          "disk": Object {
                            "bus": "virtio",
                          },
                          "name": "rootdisk",
                        },
                      ],
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                  "volumes": Array [
                    Object {
                      "containerDisk": Object {
                        "image": "fooContainer",
                      },
                      "name": "rootdisk",
                    },
                  ],
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Type
          detailed={true}
          source="fooContainer"
          type={
            ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "Container",
            }
          }
        />,
        <Source
          error={undefined}
          source="fooContainer"
          type={
            ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "Container",
            }
          }
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "detailed": true,
          "source": "fooContainer",
          "type": ProvisionSource {
            "getValue": [Function],
            "serialize": [Function],
            "toString": [Function],
            "value": "Container",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "error": undefined,
          "source": "fooContainer",
          "type": ProvisionSource {
            "getValue": [Function],
            "serialize": [Function],
            "toString": [Function],
            "value": "Container",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Type
            detailed={true}
            source="fooContainer"
            type={
              ProvisionSource {
                "getValue": [Function],
                "serialize": [Function],
                "toString": [Function],
                "value": "Container",
              }
            }
          />,
          <Source
            error={undefined}
            source="fooContainer"
            type={
              ProvisionSource {
                "getValue": [Function],
                "serialize": [Function],
                "toString": [Function],
                "value": "Container",
              }
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "detailed": true,
            "source": "fooContainer",
            "type": ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "Container",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "error": undefined,
            "source": "fooContainer",
            "type": ProvisionSource {
              "getValue": [Function],
              "serialize": [Function],
              "toString": [Function],
              "value": "Container",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`<TemplateSource /> renders correctly 5`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "description": "foo description",
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "url-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "disks": Array [
                        Object {
                          "bootOrder": 1,
                          "disk": Object {
                            "bus": "virtio",
                          },
                          "name": "rootdisk",
                        },
                      ],
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                  "volumes": Array [
                    Object {
                      "dataVolume": Object {
                        "name": "url-template-rootdisk",
                      },
                      "name": "rootdisk",
                    },
                  ],
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "error": "Datavolume url-template-rootdisk does not exist.",
      "source": undefined,
      "type": undefined,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "error": "Datavolume url-template-rootdisk does not exist.",
        "source": undefined,
        "type": undefined,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`<TemplateSource /> renders correctly 6`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    detailed={true}
    template={
      Object {
        "apiVersion": "template.openshift.io/v1",
        "kind": "Template",
        "metadata": Object {
          "annotations": Object {
            "description": "foo description",
            "name.os.template.kubevirt.io/fedora29": "Fedora 29",
          },
          "labels": Object {
            "flavor.template.kubevirt.io/small": "true",
            "os.template.kubevirt.io/fedora29": "true",
            "template.kubevirt.io/type": "vm",
            "vm.kubevirt.io/template": "fedora-generic",
            "vm.kubevirt.io/template-namespace": "default",
            "workload.template.kubevirt.io/generic": "true",
          },
          "name": "url-template",
          "namespace": "myproject",
        },
        "objects": Array [
          Object {
            "apiVersion": "kubevirt.io/v1alpha3",
            "kind": "VirtualMachine",
            "metadata": Object {
              "name": "\${NAME}",
            },
            "spec": Object {
              "template": Object {
                "spec": Object {
                  "domain": Object {
                    "cpu": Object {
                      "cores": 2,
                    },
                    "devices": Object {
                      "disks": Array [
                        Object {
                          "bootOrder": 1,
                          "disk": Object {
                            "bus": "virtio",
                          },
                          "name": "rootdisk",
                        },
                      ],
                      "interfaces": Array [
                        Object {
                          "bridge": Object {},
                          "name": "eth0",
                        },
                      ],
                      "rng": Object {},
                    },
                    "resources": Object {
                      "requests": Object {
                        "memory": "2G",
                      },
                    },
                  },
                  "networks": Array [
                    Object {
                      "name": "eth0",
                      "pod": Object {},
                    },
                  ],
                  "terminationGracePeriodSeconds": 0,
                  "volumes": Array [
                    Object {
                      "dataVolume": Object {
                        "name": "url-template-rootdisk",
                      },
                      "name": "rootdisk",
                    },
                  ],
                },
              },
            },
          },
        ],
        "parameters": Array [
          Object {
            "description": "Name for the new VM",
            "name": "NAME",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Type
          detailed={true}
          source={undefined}
          type={undefined}
        />,
        <Source
          error="Datavolume url-template-rootdisk does not exist."
          source={undefined}
          type={undefined}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "detailed": true,
          "source": undefined,
          "type": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "error": "Datavolume url-template-rootdisk does not exist.",
          "source": undefined,
          "type": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Type
            detailed={true}
            source={undefined}
            type={undefined}
          />,
          <Source
            error="Datavolume url-template-rootdisk does not exist."
            source={undefined}
            type={undefined}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "detailed": true,
            "source": undefined,
            "type": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "error": "Datavolume url-template-rootdisk does not exist.",
            "source": undefined,
            "type": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
