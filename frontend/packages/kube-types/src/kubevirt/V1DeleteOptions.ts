// tslint:disable
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1Preconditions } from './V1Preconditions';

/**
 * DeleteOptions may be provided when deleting an API object.
 * @export
 * @interface V1DeleteOptions
 */
export interface V1DeleteOptions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   * @type {string}
   * @memberof V1DeleteOptions
   */
  apiVersion?: string;
  /**
   * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @type {Array<string>}
   * @memberof V1DeleteOptions
   */
  dryRun?: string[];
  /**
   * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @type {number}
   * @memberof V1DeleteOptions
   */
  gracePeriodSeconds?: number;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   * @type {string}
   * @memberof V1DeleteOptions
   */
  kind?: string;
  /**
   * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object\'s finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @type {boolean}
   * @memberof V1DeleteOptions
   */
  orphanDependents?: boolean;
  /**
   *
   * @type {V1Preconditions}
   * @memberof V1DeleteOptions
   */
  preconditions?: V1Preconditions;
  /**
   *
   * @type {object}
   * @memberof V1DeleteOptions
   */
  propagationPolicy?: object;
}
