// tslint:disable
/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a \'resourceVersion\' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * \'metadata\' common to all objects * a \'spec\' that represents the desired state * a \'status\' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have \'metadata\' but may lack a \'spec\' or \'status\' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the \'kind\' and \'apiVersion\' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is \'metav1.Status\' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a \'versioned.Watch\' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1Affinity } from './V1Affinity';
import { V1Container } from './V1Container';
import { V1HostAlias } from './V1HostAlias';
import { V1LocalObjectReference } from './V1LocalObjectReference';
import { V1PodDNSConfig } from './V1PodDNSConfig';
import { V1PodReadinessGate } from './V1PodReadinessGate';
import { V1PodSecurityContext } from './V1PodSecurityContext';
import { V1Toleration } from './V1Toleration';
import { V1Volume } from './V1Volume';

/**
 * PodSpec is a description of a pod.
 * @export
 * @interface V1PodSpec
 */
export interface V1PodSpec {
  /**
   * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
   * @type {number}
   * @memberof V1PodSpec
   */
  activeDeadlineSeconds?: number;
  /**
   *
   * @type {V1Affinity}
   * @memberof V1PodSpec
   */
  affinity?: V1Affinity;
  /**
   * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
   * @type {boolean}
   * @memberof V1PodSpec
   */
  automountServiceAccountToken?: boolean;
  /**
   * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
   * @type {Array<V1Container>}
   * @memberof V1PodSpec
   */
  containers: V1Container[];
  /**
   *
   * @type {V1PodDNSConfig}
   * @memberof V1PodSpec
   */
  dnsConfig?: V1PodDNSConfig;
  /**
   * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are \'ClusterFirstWithHostNet\', \'ClusterFirst\', \'Default\' or \'None\'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to \'ClusterFirstWithHostNet\'.
   * @type {string}
   * @memberof V1PodSpec
   */
  dnsPolicy?: string;
  /**
   * HostAliases is an optional list of hosts and IPs that will be injected into the pod\'s hosts file if specified. This is only valid for non-hostNetwork pods.
   * @type {Array<V1HostAlias>}
   * @memberof V1PodSpec
   */
  hostAliases?: V1HostAlias[];
  /**
   * Use the host\'s ipc namespace. Optional: Default to false.
   * @type {boolean}
   * @memberof V1PodSpec
   */
  hostIPC?: boolean;
  /**
   * Host networking requested for this pod. Use the host\'s network namespace. If this option is set, the ports that will be used must be specified. Default to false.
   * @type {boolean}
   * @memberof V1PodSpec
   */
  hostNetwork?: boolean;
  /**
   * Use the host\'s pid namespace. Optional: Default to false.
   * @type {boolean}
   * @memberof V1PodSpec
   */
  hostPID?: boolean;
  /**
   * Specifies the hostname of the Pod If not specified, the pod\'s hostname will be set to a system-defined value.
   * @type {string}
   * @memberof V1PodSpec
   */
  hostname?: string;
  /**
   * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
   * @type {Array<V1LocalObjectReference>}
   * @memberof V1PodSpec
   */
  imagePullSecrets?: V1LocalObjectReference[];
  /**
   * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
   * @type {Array<V1Container>}
   * @memberof V1PodSpec
   */
  initContainers?: V1Container[];
  /**
   * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
   * @type {string}
   * @memberof V1PodSpec
   */
  nodeName?: string;
  /**
   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\'s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   * @type {{ [key: string]: string; }}
   * @memberof V1PodSpec
   */
  nodeSelector?: { [key: string]: string };
  /**
   * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
   * @type {number}
   * @memberof V1PodSpec
   */
  priority?: number;
  /**
   * If specified, indicates the pod\'s priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
   * @type {string}
   * @memberof V1PodSpec
   */
  priorityClassName?: string;
  /**
   * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md
   * @type {Array<V1PodReadinessGate>}
   * @memberof V1PodSpec
   */
  readinessGates?: V1PodReadinessGate[];
  /**
   * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
   * @type {string}
   * @memberof V1PodSpec
   */
  restartPolicy?: string;
  /**
   * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
   * @type {string}
   * @memberof V1PodSpec
   */
  schedulerName?: string;
  /**
   *
   * @type {V1PodSecurityContext}
   * @memberof V1PodSpec
   */
  securityContext?: V1PodSecurityContext;
  /**
   * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
   * @type {string}
   * @memberof V1PodSpec
   */
  serviceAccount?: string;
  /**
   * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
   * @type {string}
   * @memberof V1PodSpec
   */
  serviceAccountName?: string;
  /**
   * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.
   * @type {boolean}
   * @memberof V1PodSpec
   */
  shareProcessNamespace?: boolean;
  /**
   * If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
   * @type {string}
   * @memberof V1PodSpec
   */
  subdomain?: string;
  /**
   * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
   * @type {number}
   * @memberof V1PodSpec
   */
  terminationGracePeriodSeconds?: number;
  /**
   * If specified, the pod\'s tolerations.
   * @type {Array<V1Toleration>}
   * @memberof V1PodSpec
   */
  tolerations?: V1Toleration[];
  /**
   * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
   * @type {Array<V1Volume>}
   * @memberof V1PodSpec
   */
  volumes?: V1Volume[];
}
