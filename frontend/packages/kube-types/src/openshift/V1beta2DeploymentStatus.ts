// tslint:disable
/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a \'resourceVersion\' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * \'metadata\' common to all objects * a \'spec\' that represents the desired state * a \'status\' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have \'metadata\' but may lack a \'spec\' or \'status\' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the \'kind\' and \'apiVersion\' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is \'metav1.Status\' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a \'versioned.Watch\' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1beta2DeploymentCondition } from './V1beta2DeploymentCondition';

/**
 * DeploymentStatus is the most recently observed status of the Deployment.
 * @export
 * @interface V1beta2DeploymentStatus
 */
export interface V1beta2DeploymentStatus {
  /**
   * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  availableReplicas?: number;
  /**
   * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  collisionCount?: number;
  /**
   * Represents the latest available observations of a deployment\'s current state.
   * @type {Array<V1beta2DeploymentCondition>}
   * @memberof V1beta2DeploymentStatus
   */
  conditions?: V1beta2DeploymentCondition[];
  /**
   * The generation observed by the deployment controller.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  observedGeneration?: number;
  /**
   * Total number of ready pods targeted by this deployment.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  readyReplicas?: number;
  /**
   * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  replicas?: number;
  /**
   * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  unavailableReplicas?: number;
  /**
   * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
   * @type {number}
   * @memberof V1beta2DeploymentStatus
   */
  updatedReplicas?: number;
}
