// tslint:disable
/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a \'resourceVersion\' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * \'metadata\' common to all objects * a \'spec\' that represents the desired state * a \'status\' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have \'metadata\' but may lack a \'spec\' or \'status\' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the \'kind\' and \'apiVersion\' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is \'metav1.Status\' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a \'versioned.Watch\' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { OSV1AllowedFlexVolume } from './OSV1AllowedFlexVolume';
import { OSV1FSGroupStrategyOptions } from './OSV1FSGroupStrategyOptions';
import { OSV1RunAsUserStrategyOptions } from './OSV1RunAsUserStrategyOptions';
import { OSV1SELinuxContextStrategyOptions } from './OSV1SELinuxContextStrategyOptions';
import { OSV1SupplementalGroupsStrategyOptions } from './OSV1SupplementalGroupsStrategyOptions';
import { V1ObjectMeta } from './V1ObjectMeta';

/**
 * SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container. For historical reasons SCC was exposed under the core Kubernetes API group. That exposure is deprecated and will be removed in a future release - users should instead use the security.openshift.io group to manage SecurityContextConstraints.
 * @export
 * @interface OSV1SecurityContextConstraints
 */
export interface OSV1SecurityContextConstraints {
  /**
   * AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowHostDirVolumePlugin: boolean;
  /**
   * AllowHostIPC determines if the policy allows host ipc in the containers.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowHostIPC: boolean;
  /**
   * AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowHostNetwork: boolean;
  /**
   * AllowHostPID determines if the policy allows host pid in the containers.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowHostPID: boolean;
  /**
   * AllowHostPorts determines if the policy allows host ports in the containers.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowHostPorts: boolean;
  /**
   * AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowPrivilegeEscalation?: boolean;
  /**
   * AllowPrivilegedContainer determines if a container can request to be run as privileged.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  allowPrivilegedContainer: boolean;
  /**
   * AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author\'s discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use \'*\'.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  allowedCapabilities: string[];
  /**
   * AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"Volumes\" field.
   * @type {Array<OSV1AllowedFlexVolume>}
   * @memberof OSV1SecurityContextConstraints
   */
  allowedFlexVolumes?: OSV1AllowedFlexVolume[];
  /**
   * AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.  Examples: e.g. \"foo/_*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  allowedUnsafeSysctls?: string[];
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   * @type {string}
   * @memberof OSV1SecurityContextConstraints
   */
  apiVersion?: string;
  /**
   * DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  defaultAddCapabilities: string[];
  /**
   * DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  defaultAllowPrivilegeEscalation?: boolean;
  /**
   * ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.  Examples: e.g. \"foo/_*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  forbiddenSysctls?: string[];
  /**
   *
   * @type {OSV1FSGroupStrategyOptions}
   * @memberof OSV1SecurityContextConstraints
   */
  fsGroup?: OSV1FSGroupStrategyOptions;
  /**
   * The groups that have permission to use this security context constraints
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  groups?: string[];
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   * @type {string}
   * @memberof OSV1SecurityContextConstraints
   */
  kind?: string;
  /**
   *
   * @type {V1ObjectMeta}
   * @memberof OSV1SecurityContextConstraints
   */
  metadata?: V1ObjectMeta;
  /**
   * Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority. An unset value is considered a 0 priority. If scores for multiple SCCs are equal they will be sorted from most restrictive to least restrictive. If both priorities and restrictions are equal the SCCs will be sorted by name.
   * @type {number}
   * @memberof OSV1SecurityContextConstraints
   */
  priority: number;
  /**
   * ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
   * @type {boolean}
   * @memberof OSV1SecurityContextConstraints
   */
  readOnlyRootFilesystem: boolean;
  /**
   * RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  requiredDropCapabilities: string[];
  /**
   *
   * @type {OSV1RunAsUserStrategyOptions}
   * @memberof OSV1SecurityContextConstraints
   */
  runAsUser?: OSV1RunAsUserStrategyOptions;
  /**
   *
   * @type {OSV1SELinuxContextStrategyOptions}
   * @memberof OSV1SecurityContextConstraints
   */
  seLinuxContext?: OSV1SELinuxContextStrategyOptions;
  /**
   * SeccompProfiles lists the allowed profiles that may be set for the pod or container\'s seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container. The wildcard \'*\' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  seccompProfiles?: string[];
  /**
   *
   * @type {OSV1SupplementalGroupsStrategyOptions}
   * @memberof OSV1SecurityContextConstraints
   */
  supplementalGroups?: OSV1SupplementalGroupsStrategyOptions;
  /**
   * The users who have permissions to use this security context constraints
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  users?: string[];
  /**
   * Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use \"*\". To allow no volumes, set to [\"none\"].
   * @type {Array<string>}
   * @memberof OSV1SecurityContextConstraints
   */
  volumes: string[];
}
